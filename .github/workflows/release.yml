name: Publish to GitHub Packages

on:
  push:
    branches:
      - main

jobs:
  build-and-publish:
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.DEPLOY_KEY }}
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@paulgeorge35'

      - name: Install Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Build
        run: bun run build

      - name: Lint
        run: bun run lint
          
      - name: Determine version bump
        id: version-bump
        run: |
          # Get current version from package.json
          current_version=$(node -p -e "require('./package.json').version")
          # Get all commit messages since the last tag (with v prefix)
          commits=$(git log "v$current_version"..HEAD --pretty=%B)
          # Log all commit messages for debugging
          echo "Commit messages found:"
          echo "$commits"
          echo "-------------------"
          
          # Determine version type based on keywords
          if echo "$commits" | grep -iq "BREAKING CHANGE"; then
            echo "major" > version_type
          elif echo "$commits" | grep -iq "feat"; then
            echo "minor" > version_type
          else
            echo "patch" > version_type
          fi
          echo "Version bump determined: $(cat version_type)"

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
      - name: Bump version
        id: bump-version
        run: |
          version_type=$(cat version_type)
          # Use `npm version` to bump, but avoid creating a git tag
          npm version $version_type --no-git-tag-version
          
          # Get the new version from package.json
          new_version=$(node -p -e "require('./package.json').version")
          
          # Commit and push changes
          git add package.json
          git commit -m "ci: bump version to v$new_version [skip ci]"
          
          # Save both versions (with and without v) as environment variables
          echo "VERSION=$new_version" >> $GITHUB_ENV
          echo "VERSION_TAG=v$new_version" >> $GITHUB_ENV

      - name: Push updated files
        run: |
          git push origin main
      
      - name: Create and push tag
        run: |
          git tag -a "$VERSION_TAG" -m "Release $VERSION_TAG"
          git push origin "$VERSION_TAG"

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.VERSION_TAG }}
          name: ${{ env.VERSION_TAG }}
          body: |
            ## Changes in this release:
            ${{ github.event.head_commit.message }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to GitHub Packages
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
